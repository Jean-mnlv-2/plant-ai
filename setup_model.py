#!/usr/bin/env python3
"""
Script de configuration du mod√®le pour Plant-AI.
Copie le mod√®le entra√Æn√© vers l'emplacement attendu par l'API.
"""

import shutil
from pathlib import Path


def setup_model():
    """Configure le mod√®le pour l'API."""
    print("üîß Configuration du mod√®le Plant-AI")
    print("=" * 40)
    
    # Chemins
    source_model = Path("runs/train/plant_ai/weights/best.pt")
    target_model = Path("models/yolov8_best.pt")
    models_dir = Path("models")
    
    # Cr√©er le dossier models s'il n'existe pas
    models_dir.mkdir(exist_ok=True)
    print(f"‚úÖ Dossier models cr√©√©/v√©rifi√©: {models_dir}")
    
    # V√©rifier si le mod√®le source existe
    if not source_model.exists():
        print(f"‚ùå Mod√®le source non trouv√©: {source_model}")
        print("   Assurez-vous d'avoir entra√Æn√© le mod√®le avec:")
        print("   python scripts/train_yolov8.py --epochs 50")
        return False
    
    # Copier le mod√®le
    try:
        shutil.copy2(source_model, target_model)
        print(f"‚úÖ Mod√®le copi√©: {source_model} ‚Üí {target_model}")
        
        # V√©rifier la taille du fichier
        size_mb = target_model.stat().st_size / (1024 * 1024)
        print(f"   Taille: {size_mb:.1f} MB")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la copie: {e}")
        return False


def verify_setup():
    """V√©rifie que la configuration est correcte."""
    print("\nüîç V√©rification de la configuration")
    print("-" * 30)
    
    # V√©rifier le mod√®le
    model_path = Path("models/yolov8_best.pt")
    if model_path.exists():
        print(f"‚úÖ Mod√®le trouv√©: {model_path}")
    else:
        print(f"‚ùå Mod√®le manquant: {model_path}")
        return False
    
    # V√©rifier la base de donn√©es
    db_path = Path("models/plant_ai.db")
    if db_path.exists():
        print(f"‚úÖ Base de donn√©es trouv√©e: {db_path}")
    else:
        print(f"‚ÑπÔ∏è  Base de donn√©es sera cr√©√©e au premier d√©marrage")
    
    # V√©rifier les d√©pendances
    try:
        import fastapi
        import ultralytics
        import sqlite3
        print("‚úÖ D√©pendances principales OK")
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante: {e}")
        return False
    
    return True


def main():
    """Fonction principale."""
    print("üå± Configuration du syst√®me Plant-AI am√©lior√©")
    print("=" * 50)
    
    # Configuration du mod√®le
    if setup_model():
        print("\n‚úÖ Configuration du mod√®le r√©ussie")
    else:
        print("\n‚ùå √âchec de la configuration du mod√®le")
        return
    
    # V√©rification
    if verify_setup():
        print("\nüéâ Configuration termin√©e avec succ√®s !")
        print("\nPour d√©marrer l'API:")
        print("  uvicorn backend.app.main:app --host 0.0.0.0 --port 8000")
        print("\nPour tester les am√©liorations:")
        print("  python test_improvements.py")
        print("  python demo_improvements.py")
    else:
        print("\n‚ö†Ô∏è  Configuration incompl√®te, v√©rifiez les erreurs ci-dessus")


if __name__ == "__main__":
    main()
