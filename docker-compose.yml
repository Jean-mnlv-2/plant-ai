version: '3.8'

services:
  # Base de données PostgreSQL pour la production
  postgres:
    image: postgres:15-alpine
    container_name: plant_ai_postgres
    environment:
      POSTGRES_DB: plant_ai
      POSTGRES_USER: plant_ai
      POSTGRES_PASSWORD: plant_ai_secure_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=fr_FR.UTF-8 --lc-ctype=fr_FR.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U plant_ai -d plant_ai"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - plant_ai_network

  # API Plant-AI
  plant_ai_api:
    build: .
    container_name: plant_ai_api
    environment:
      # Configuration base de données
      PLANT_AI_DB_HOST: postgres
      PLANT_AI_DB_PORT: 5432
      PLANT_AI_DB_NAME: plant_ai
      PLANT_AI_DB_USER: plant_ai
      PLANT_AI_DB_PASSWORD: plant_ai_secure_password_2024
      
      # Configuration API
      PLANT_AI_LOG_LEVEL: INFO
      PLANT_AI_MAX_UPLOAD_BYTES: 20971520  # 20MB
      
      # CORS pour production
      PLANT_AI_ALLOWED_ORIGINS: '["https://yourdomain.com", "https://app.yourdomain.com"]'
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./reports:/app/reports
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - plant_ai_network

  # Redis pour le cache (optionnel)
  redis:
    image: redis:7-alpine
    container_name: plant_ai_redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - plant_ai_network

  # Nginx pour le reverse proxy (optionnel)
  nginx:
    image: nginx:alpine
    container_name: plant_ai_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - plant_ai_api
    restart: unless-stopped
    networks:
      - plant_ai_network

volumes:
  postgres_data:
    driver: local

networks:
  plant_ai_network:
    driver: bridge
