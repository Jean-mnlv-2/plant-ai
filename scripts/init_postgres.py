"""
Script d'initialisation de la base de donn√©es PostgreSQL pour Plant-AI.
"""

import asyncio
import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire backend au path
backend_path = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_path))

from backend.app.database_postgres import postgres_db
from backend.app.settings import settings


async def init_database():
    """Initialiser la base de donn√©es PostgreSQL."""
    print("üå± Initialisation de la base de donn√©es PostgreSQL pour Plant-AI")
    print("=" * 60)
    
    try:
        # Se connecter √† PostgreSQL
        print("üì° Connexion √† PostgreSQL...")
        await postgres_db.connect()
        print("‚úÖ Connexion r√©ussie")
        
        # Les tables sont cr√©√©es automatiquement lors de la connexion
        print("‚úÖ Base de donn√©es initialis√©e avec succ√®s")
        
        # Afficher les informations de connexion
        print("\nüìä Informations de connexion:")
        print(f"   Host: {settings.postgres_host}")
        print(f"   Port: {settings.postgres_port}")
        print(f"   Database: {settings.postgres_database}")
        print(f"   User: {settings.postgres_user}")
        
        print("\nüéâ Base de donn√©es pr√™te pour la base de connaissances agronomique !")
        print("   - Support de 50,000+ fiches maladies")
        print("   - Recherche full-text optimis√©e")
        print("   - Support multilingue")
        print("   - Interface d'administration compl√®te")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation: {e}")
        print("\nüîß V√©rifiez que PostgreSQL est install√© et configur√© correctement.")
        print("   - PostgreSQL doit √™tre en cours d'ex√©cution")
        print("   - La base de donn√©es doit exister")
        print("   - L'utilisateur doit avoir les permissions appropri√©es")
        sys.exit(1)
    
    finally:
        # Fermer la connexion
        await postgres_db.disconnect()


async def test_connection():
    """Tester la connexion √† PostgreSQL."""
    print("üß™ Test de connexion PostgreSQL...")
    
    try:
        await postgres_db.connect()
        
        # Test simple
        async with postgres_db.pool.acquire() as conn:
            result = await conn.fetchval("SELECT 1")
            if result == 1:
                print("‚úÖ Test de connexion r√©ussi")
            else:
                print("‚ùå Test de connexion √©chou√©")
                return False
        
        await postgres_db.disconnect()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False


async def create_sample_data():
    """Cr√©er des donn√©es d'exemple pour tester."""
    print("\nüìù Cr√©ation de donn√©es d'exemple...")
    
    try:
        await postgres_db.connect()
        
        # Cr√©er quelques cultures
        cultures = [
            ("Tomate", "Solanum lycopersicum", "L√©gume", "Plante potag√®re tr√®s cultiv√©e"),
            ("Ma√Øs", "Zea mays", "C√©r√©ale", "C√©r√©ale de base dans de nombreuses r√©gions"),
            ("Bl√©", "Triticum aestivum", "C√©r√©ale", "C√©r√©ale la plus cultiv√©e au monde"),
            ("Pomme", "Malus domestica", "Arbre fruitier", "Arbre fruitier tr√®s r√©pandu"),
            ("Riz", "Oryza sativa", "C√©r√©ale", "C√©r√©ale de base en Asie")
        ]
        
        culture_ids = []
        for name, scientific, category, description in cultures:
            culture_id = await postgres_db.create_culture(name, scientific, category, description)
            culture_ids.append(culture_id)
            print(f"   ‚úÖ Culture cr√©√©e: {name}")
        
        # Cr√©er quelques pathog√®nes
        pathogens = [
            ("Phytophthora infestans", "Mildiou", "fungus", "Champignon responsable du mildiou"),
            ("Puccinia graminis", "Rouille", "fungus", "Champignon responsable de la rouille"),
            ("Xanthomonas oryzae", "Bact√©riose", "bacteria", "Bact√©rie pathog√®ne du riz"),
            ("Tobacco mosaic virus", "Virus de la mosa√Øque", "virus", "Virus tr√®s r√©pandu"),
            ("Meloidogyne incognita", "N√©matode", "parasite", "N√©matode des racines")
        ]
        
        pathogen_ids = []
        for scientific, common, ptype, description in pathogens:
            pathogen_id = await postgres_db.create_pathogen(scientific, common, ptype, description)
            pathogen_ids.append(pathogen_id)
            print(f"   ‚úÖ Pathog√®ne cr√©√©: {scientific}")
        
        # Cr√©er une fiche maladie d'exemple
        sample_disease = {
            "culture_id": culture_ids[0],  # Tomate
            "pathogen_id": pathogen_ids[0],  # Phytophthora infestans
            "scientific_name": "Mildiou de la tomate",
            "common_name": "Mildiou",
            "severity_level": "high",
            "treatment_urgency": "immediate",
            "symptoms": [
                {
                    "description": "Taches brunes sur les feuilles",
                    "severity": "high",
                    "affected_part": "feuilles"
                },
                {
                    "description": "Pourriture des fruits",
                    "severity": "high",
                    "affected_part": "fruits"
                }
            ],
            "images": [
                {
                    "image_url": "https://example.com/mildiou-tomate-1.jpg",
                    "image_type": "symptom",
                    "description": "Taches sur les feuilles",
                    "is_primary": True
                }
            ],
            "conditions": {
                "temperature_min": 15.0,
                "temperature_max": 25.0,
                "humidity_min": 80,
                "humidity_max": 100,
                "soil_type": "Humide",
                "seasonality": "Printemps, √ât√©",
                "climate_conditions": "Humidit√© √©lev√©e et temp√©ratures mod√©r√©es"
            },
            "control_methods": [
                {
                    "method_type": "cultural",
                    "description": "Rotation des cultures",
                    "effectiveness": "high",
                    "cost_level": "low"
                },
                {
                    "method_type": "chemical",
                    "description": "Traitement fongicide au cuivre",
                    "effectiveness": "high",
                    "cost_level": "medium"
                }
            ],
            "products": [
                {
                    "product_name": "Bouillie bordelaise",
                    "active_ingredient": "Sulfate de cuivre",
                    "dosage": "2-3 kg/ha",
                    "application_method": "Pulv√©risation foliaire",
                    "safety_class": "Classe 2",
                    "registration_number": "FR-123456"
                }
            ],
            "precautions": {
                "risk_level": "medium",
                "safety_period_days": 7,
                "dosage_instructions": "Respecter les doses recommand√©es",
                "contraindications": "Ne pas traiter par temps chaud",
                "protective_equipment": "Gants, masque, lunettes"
            },
            "prevention": [
                {
                    "practice_type": "cultural",
                    "description": "√âviter l'humidit√© excessive",
                    "timing": "Toute la saison",
                    "effectiveness": "high"
                }
            ],
            "regions": [
                {
                    "region_name": "Europe",
                    "country": "France",
                    "climate_zone": "Temp√©r√©",
                    "latitude_min": 42.0,
                    "latitude_max": 51.0,
                    "longitude_min": -5.0,
                    "longitude_max": 8.0
                }
            ],
            "translations": [
                {
                    "language_code": "en",
                    "field_name": "common_name",
                    "translated_text": "Late blight"
                }
            ]
        }
        
        disease_id = await postgres_db.create_disease_entry(sample_disease)
        print(f"   ‚úÖ Fiche maladie cr√©√©e: {sample_disease['common_name']} (ID: {disease_id})")
        
        await postgres_db.disconnect()
        print("\nüéâ Donn√©es d'exemple cr√©√©es avec succ√®s !")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des donn√©es d'exemple: {e}")
        await postgres_db.disconnect()


def main():
    """Fonction principale."""
    import argparse
    
    parser = argparse.ArgumentParser(description="Initialisation PostgreSQL pour Plant-AI")
    parser.add_argument("--test", action="store_true", help="Tester seulement la connexion")
    parser.add_argument("--sample", action="store_true", help="Cr√©er des donn√©es d'exemple")
    
    args = parser.parse_args()
    
    if args.test:
        asyncio.run(test_connection())
    elif args.sample:
        asyncio.run(create_sample_data())
    else:
        asyncio.run(init_database())


if __name__ == "__main__":
    main()
